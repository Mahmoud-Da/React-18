*** 1-_Introduction ***
we will talk a bout routing which is a way to allow the user go from one page 
to another 
to make that happen we will use a popular library called React Router
we will learn all the key concepts including:
- setting up router
- Handling the errors
- navigation between pages
- dynamic routes 
- nested routes 
- private routes

*** 2-_Setting_Up_Routing ***
- first we install the React Router
-------------------code----------------------
npm i react-router-dom@6.10.0
-------------------code----------------------

PS: React Router has breaking changes when the version updated 
so we will learn the concepts of it later if it changed we can read the documentation 

- in src/routing we add file called routes.tsx 

- inside we create a router using createBrowserRouter we also component 
called BrowserRouter but it doesn`t support all the features

- we called createBrowserRouter function and give it an array of object and each router 
object should have two properties path and element to set which component rendered when 
the user goes to that path 
-------------------code----------------------
import { createBrowserRouter } from "react-router-dom";
import HomePage from "./HomePage";

createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
]);
-------------------code----------------------

- we can another route for the user page 
-------------------code----------------------
createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/users",
    element: <UserListPage />,
  },
]);

-------------------code----------------------

- now we store the result in router object and finally we export it 
-------------------code----------------------
const router = createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/users",
    element: <UserListPage />,
  },
]);

export default router;
-------------------code----------------------

- finally we go to the main file and replace App component with RouterProvider component
and set the router property to the router that we export it from routers.tsx 
-------------------code----------------------
ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <RouterProvider router={router}></RouterProvider>
  </React.StrictMode>
);
-------------------code----------------------

- so instead on rendering the App component we render the router component and let React Router 
decide which component to render depends on the path

now we test our application
here we can see the home page
-------------------code----------------------
http://localhost:5173
-------------------code----------------------

and here we can see the users page 
-------------------code----------------------
http://localhost:5173/users
-------------------code----------------------

now we have multi pages in our application

*** 3-_Navigation  ***
how to make the user navigation between the users 

- currently in the HomePage we have link to the users if open the dev tool and click on the users 
we full page reload why cause this is the default behavior of the anchor element of html <a>
this is not the best way to let the user navigate 
so instead of reload all the page we want to replace only the content of homepage component 
with users component

- to do that:
- we go to the HomePage.tsx 

- in React Router we component called Link it`s a replacement of regular anchor element
so we replace a with Link element that takes to property where we set the target
-------------------code----------------------
<Link to="/users">Users</Link>
-------------------code----------------------

- now while open the dev tool if we clicked on the Users link we can see that no request send to the 
backend because the content of the users list is already shipped to the client  
so we don`t need go back to the server and fetch the entire page and this the benefit of using the 
Link component of the react router  

- we can render the user to another page after submitting a form 
- inside the router.tsx  we add new route
-------------------code----------------------
const router = createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/users",
    element: <UserListPage />,
  },
  {
    path: "/contact",
    element: <ContactPage />,
  },
]);
-------------------code----------------------

- now inside the ContactPage we have a form with button now let`s say when the user submit a form 
we want to Redirect it to the home
to do that we use the navigate hook 
-------------------code----------------------
const navigate = useNavigate();
-------------------code----------------------

- then we call it and give it the Redirect component as argument 
-------------------code----------------------
onSubmit={(event) => {
        event.preventDefault();
        // Redirect the user to the home page
        navigate("/");
      }
}
-------------------code----------------------

now we test our code by going to
-------------------code----------------------
http://localhost:5173/contact
-------------------code----------------------

and press Button 

*** 4-_Passing_Data_with_Route_Parameters  ***
sometimes we need to handle dynamic routes and pass data to our components throw the url 
for example when we click on the user 
when we click on the user need the url to have the number of id of that user
-------------------code----------------------
http://localhost:5173/users/1
http://localhost:5173/users/2
-------------------code----------------------

- in the routers file we create a new route we called /users/:id
-------------------code----------------------
const router = createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/users",
    element: <UserListPage />,
  },
  {
    path: "/users/:id",
    element: <UserDetailPage />,
  },
  {
    path: "/contact",
    element: <ContactPage />,
  },
]);
-------------------code----------------------

so every column should prefix with : 
ex:
-------------------code----------------------
{
  path: "/posts/:year/:id",
  element: <Posts />,
}
-------------------code----------------------

- now inside the UserListPage we change the anchor element with Link component
and replace the :id with the dynamic part 
-------------------code----------------------
<Link to={`/users/${user.id}`}>{user.name}</Link>
-------------------code----------------------


*** 5-_Getting_Data_about_the_Current_Route ***
sometimes we need to now which page we are or which values passed in the url
we have bunch of hooks for that

- the first hook we are gonna look for is called useParams
with this hook we can extract parameter values from the url 

- now inside the UserDetailPage we called the useParams and log it on the console
-------------------code----------------------
const UserDetailPage = () => {
  const params = useParams();
  console.log(params);
  return <p>User</p>;
};
-------------------code----------------------


- now we have a single property which is the id 
and if we have multi parameters inside the console we will see more more properties
so useParams return an object each property is each params from the url 
-------------------code----------------------
{id: '1'}
-------------------code----------------------

- and as we see the value of the id is string so if want to find user by that id we should 
first parse it to integer


- we have another hook called useSearchParams and with that we can access and update the query string parameter
and similar to the state hook it returns two elements of array the first element is our current query parameter
and the second element is function for updating it


- so we called it and log it but before that we create custom url with query string parameter
http://localhost:5173/users/1?name=Alice&age=25
-------------------code----------------------
const UserDetailPage = () => {
  const params = useParams();
  console.log(params);

  const [searchParam, setSearchParam] = useSearchParams();
  console.log("searchParam: ", searchParam);
  return <p>User</p>;
};
-------------------code----------------------

we got the size of the query string parameter
-------------------code----------------------
URLSearchParamsÂ {size: 2}
-------------------code----------------------

- if we want to show the query parameter we use toString method  
-------------------code----------------------
console.log("searchParam: ", searchParam.toString());
-------------------code----------------------

we can extract all the query parameter
-------------------code----------------------
name=Alice&age=25
-------------------code----------------------

- we can also individual parameter by using the get method and the name of parameter
-------------------code----------------------
console.log("searchParam: ", searchParam.get("name"));
-------------------code----------------------

- now we can see the Alice only
-------------------code----------------------
Alice
-------------------code----------------------

- now we can use setSearchParam to update the query string parameter but we have to be careful a bout that 
cause it has side effect as we learn before the component should be pure so it should not have any side effect while rendering
so we should called this function only inside event handler or inside an effect 


- we have another hook called useLocation hook and with this we can access to the current location 
-------------------code----------------------
const location = useLocation();
console.log(location);
-------------------code----------------------

we have all the detail a bout the current route 
-------------------code----------------------
{pathname: '/users/1', search: '?name=Alice&age=25', hash: '', state: null, key: 'default'}
-------------------code----------------------

- so using this three hooks we can get information about the current hook 

*** 6-_Nested_Routes ***
in real world application typically we have navigation bar at the top and as the user navigate 
between pages we render different components in our content area (user page) 

how we can implement this
- in our src we have component called layout in this component we have the navigation bar
which is a basic bootstrap navigation bar  we have a couple of links to take the user to 
users and home pages 
now in our layout we have NavBar and div with main area 

now to implement our scenario in the layout we add Outlet
-------------------code----------------------
const Layout = () => {
  return (
    <>
      <NavBar />
      <div id="main">
        <Outlet />
      </div>
    </>
  );
};
-------------------code----------------------

- Outlet component:
it`s placeholder for child component so at run time depends on the user location different component
will render inside this Outlet component

- next we go to the routes file and create a nested structure 
we create a new route and set the path to \ which present the root of our website 
and set the element to the layout and this route can get children 
-------------------code----------------------
const router = createBrowserRouter([
  {
    path: "/",
    element: <Layout />,
    children: [
      
    ]
  },...])
-------------------code----------------------

- now we move the other routes inside the children array
the path of these routes should be relative to the path of their parent 
so we don`t need the / slash anymore 
-------------------code----------------------
const router = createBrowserRouter([
  {
    path: "/",
    element: <Layout />,
    children: [
      {
        path: "",
        element: <HomePage />,
      },
      {
        path: "users",
        element: <UserListPage />,
      },
      {
        path: "users/:id",
        element: <UserDetailPage />,
      },
      {
        path: "contact",
        element: <ContactPage />,
      },
    ],
  },
]);
-------------------code----------------------


- test our application

- now back to our routes configuration component
because the path for the HomePage is empty string we can replace with index: true 
that means this is the default component when the user is inside the parent location 
-------------------code----------------------
children: [
      {
        index: true,
        element: <HomePage />,
      },
      ... ]
-------------------code----------------------

PS: there is no difference between empty path or index true (maybe index true is easier to notice)

- so we done with nested routes the only thing that is left 
is updating the length in the navigation bar so inside the NavBar.tsx we need to replace the current 
anchor with Link component
-------------------code----------------------
<li className="nav-item">
  <Link to="/" className="nav-link">
    Home
  </Link>
</li>
<li className="nav-item">
  <Link to="/users" className="nav-link">
    Users
  </Link>
</li>
-------------------code----------------------

- now we have fully functioning navigate bar 

*** 7-_Exercise-_Working_with_Nested_Routes ***
when we click on a user of Page Users we want to show the user id next 
to it 

in the Routes we create UsersPage.tsx 
in this component we return .row>.col*2
-------------------code----------------------
<div className="row">
  <div className="col">
  </div>
  <div className="col">
  </div>
</div>
-------------------code----------------------

- in the left column we add the UserListPage
-------------------code----------------------
<div className="row">
  <div className="col">
  <UserListPage></UserListPage>
  </div>
  <div className="col">
  </div>
</div>
-------------------code----------------------

- now UserListPage doesn`t represent a complete page so to make it name 
more clearly we change it name to UserList 
-------------------code----------------------
const UserList = () => {
  ...}
-------------------code----------------------

and we rename the file either

- in the right component we add an OutLet because at run time we different
instance of UserDetailPage component depending on the current route
-------------------code----------------------
<div className="row">
  <div className="col">
    <UserList></UserList>
  </div>
  <div className="col">
    <Outlet />
  </div>
</div>
-------------------code----------------------

- we go to the routes.tsx  
we change the element of the users routes to UsersPage
-------------------code----------------------
{
  path: "users",
  element: <UsersPage />,
}
-------------------code----------------------

and we add children property to the users and move the UserDetailPage to it 
-------------------code----------------------
{
  path: "users",
  element: <UsersPage />,
  children: [
    {
      path: "users/:id",
      element: <UserDetailPage />,
    },
  ],
}
-------------------code----------------------

now cause the child routes should relative to the parent route
so we remove the users/ form the path of UserDetailPage
-------------------code----------------------
{
  path: "users",
  element: <UsersPage />,
  children: [
    {
      path: ":id",
      element: <UserDetailPage />,
    },
  ],
}
-------------------code----------------------


- and as UserListPage we change the UserDetailPage to UserDetail for clarity

-------------------code----------------------
{
  path: "users",
  element: <UsersPage />,
  children: [
    {
      path: ":id",
      element: <UserDetail />,
    },
  ],
}
-------------------code----------------------

and change the component name and file

- now in our application if clicked on the User name the "User" only will render
and is not clear which user we are looking at 

so we render the id of the params 
-------------------code----------------------
const { id } = useParams();

return <p>User {id}</p>;
-------------------code----------------------
