*** 1-_Introduction ***
we will talk a bout routing which is a way to allow the user go from one page 
to another 
to make that happen we will use a popular library called React Router
we will learn all the key concepts including:
- setting up router
- Handling the errors
- navigation between pages
- dynamic routes 
- nested routes 
- private routes

*** 2-_Setting_Up_Routing ***
- first we install the React Router
-------------------code----------------------
npm i react-router-dom@6.10.0
-------------------code----------------------

PS: React Router has breaking changes when the version updated 
so we will learn the concepts of it later if it changed we can read the documentation 

- in src/routing we add file called routes.tsx 

- inside we create a router using createBrowserRouter we also component 
called BrowserRouter but it doesn`t support all the features

- we called createBrowserRouter function and give it an array of object and each router 
object should have two properties path and element to set which component rendered when 
the user goes to that path 
-------------------code----------------------
import { createBrowserRouter } from "react-router-dom";
import HomePage from "./HomePage";

createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
]);
-------------------code----------------------

- we can another route for the user page 
-------------------code----------------------
createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/users",
    element: <UserListPage />,
  },
]);

-------------------code----------------------

- now we store the result in router object and finally we export it 
-------------------code----------------------
const router = createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/users",
    element: <UserListPage />,
  },
]);

export default router;
-------------------code----------------------

- finally we go to the main file and replace App component with RouterProvider component
and set the router property to the router that we export it from routers.tsx 
-------------------code----------------------
ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <RouterProvider router={router}></RouterProvider>
  </React.StrictMode>
);
-------------------code----------------------

- so instead on rendering the App component we render the router component and let React Router 
decide which component to render depends on the path

now we test our application
here we can see the home page
-------------------code----------------------
http://localhost:5173
-------------------code----------------------

and here we can see the users page 
-------------------code----------------------
http://localhost:5173/users
-------------------code----------------------

now we have multi pages in our application

*** 3-_Navigation  ***
how to make the user navigation between the users 

- currently in the HomePage we have link to the users if open the dev tool and click on the users 
we full page reload why cause this is the default behavior of the anchor element of html <a>
this is not the best way to let the user navigate 
so instead of reload all the page we want to replace only the content of homepage component 
with users component

- to do that:
- we go to the HomePage.tsx 

- in React Router we component called Link it`s a replacement of regular anchor element
so we replace a with Link element that takes to property where we set the target
-------------------code----------------------
<Link to="/users">Users</Link>
-------------------code----------------------

- now while open the dev tool if we clicked on the Users link we can see that no request send to the 
backend because the content of the users list is already shipped to the client  
so we don`t need go back to the server and fetch the entire page and this the benefit of using the 
Link component of the react router  

- we can render the user to another page after submitting a form 
- inside the router.tsx  we add new route
-------------------code----------------------
const router = createBrowserRouter([
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/users",
    element: <UserListPage />,
  },
  {
    path: "/contact",
    element: <ContactPage />,
  },
]);
-------------------code----------------------

- now inside the ContactPage we have a form with button now let`s say when the user submit a form 
we want to Redirect it to the home
to do that we use the navigate hook 
-------------------code----------------------
const navigate = useNavigate();
-------------------code----------------------

- then we call it and give it the Redirect component as argument 
-------------------code----------------------
onSubmit={(event) => {
        event.preventDefault();
        // Redirect the user to the home page
        navigate("/");
      }
}
-------------------code----------------------

now we test our code by going to
-------------------code----------------------
http://localhost:5173/contact
-------------------code----------------------

and press Button 
