********
STEP1
********
final result file
create ExpenseList (versions/v1/ExpenseList.tsx)
chnage App.tsx (versions/v1/App.tsx)

1- we will start from the easiest approach
we create components folder and inside it
we creating ExpenseList.tsx

2- we create table element
table.table.table-bordered

(table-bordered) class to give it nice border

3- inside the table element we create thead inside it tr with 4 th elements
thead>tr>th*4

4- we specifiy our elements 
Desciption
Amount
Category
we leave the last th empty that where we will put the delete button
ex: 
<th>Desciption</th>
<th>Amount</th>
<th>Category</th>
<th></th>

5-
under the thead element we create tbody element
inside the tbody we want to render the expenses(fee: 経費)
the data inside the tbody we want pass it them as props (not save the data inside a component)
to be reuseble component 
so... like always

6-
define interface to define the shape of our data
interface Props {
  expense: string[];
}
but expense will not be an array coz every expense will be diffrent object

{**refresh what is object
object: data field that has unique attributes and behavior
ex: Person Object
Each person object has unique attributes (name and age) 
and behavior (greet() method and have_birthday() method).
The objects person1 and person2 are instances of the Person class,and they each 
have their own set of attributes and can perform the defined behaviors.}

so.. we need to define the shape of expense seprately
- we create Expense interface
interface Expense {
  id: number;
  desciption: string;
  amount: number;
  category: string;
}

PS: normally category will be another object but now we want to make out project simple

- we set expense inside Props interface to Expense[]
interface Props {
  expense: Expense[];
}

so finally we have:
interface Expense {
  id: number;
  desciption: string;
  amount: number;
  category: string;
}
interface Props {
  expense: Expense[];
}

next....


7- we set the props 
const ExpenseList = ({ expenses }: Props)

then in the tbody section we map each expenses 

{expenses.map((expense) => (<tr key={expense.id}></tr>))}

inside the tr we create td*4
each td we will render the Expense perperty
<tr key={expense.id}>
  <td>{expense.desciption}</td>
  <td>{expense.amount}</td>
  <td>{expense.category}</td>
  <td></td>
</tr>

inside the last td we create td button
button.btn.btn-outline-danger
<button className="btn btn-outline-danger">Delete</button>

8-
create delete fuction
inside Props interface we add it
onDelete: (id: number) => void;

then add it to props 
const ExpenseList = ({ expenses, onDelete }: Props) 

finally we handle it 
<button
  className="btn btn-outline-danger"
  onClick={() => onDelete(expense.id)}
>
  Delete
</button>

9-
we add tfoot element wiht td and 4 td
tfoot>tr>td*4

td:
Total

now to calculate the total dynamically using reduce method 
in JS all arrays has reduce methods 
it use to combine the arrays elements to somthing else

**ex:
// Simple array of numbers
const numbers = [1, 2, 3, 4, 5];
// Using reduce to find the sum of elements
const sum = numbers.reduce((accumulator, currentValue) => {
    return accumulator + currentValue;
}, 0);
console.log("Sum:", sum);
accumulator is the number that hold the total value

now inside the second td
{expenses.reduce((acc, expense) => acc + expense.amount, 0)}

0 for inisital the value

finally we use toFixed method to set the number of the decimal result
{expenses
  .reduce((acc, expense) => acc + expense.amount, 0)
  .toFixed(2)}

we add $ to see the amount in dollar
${expenses
  .reduce((acc, expense) => acc + expense.amount, 0)
  .toFixed(2)}

10- 
add ExpenseList to our App.tsx fir testing
<ExpenseList/>

to add expenses and onDelete props

- create dummy data
const expenses = [
    {
      id: 1,
      desciption: "aaa",
      amount: 10,
      category: "Utilities",
    },
    {
      id: 2,
      desciption: "bbb",
      amount: 10,
      category: "Utilities",
    },
    {
      id: 3,
      desciption: "ccc",
      amount: 10,
      category: "Utilities",
    },
    {
      id: 4,
      desciption: "ddd",
      amount: 10,
      category: "Utilities",
    },
  ];

- to show the id of delete item
onDelete={(id) => console.log("Deleted", id)}


<ExpenseList
    expenses={expenses}
    onDelete={(id) => console.log("Deleted", id)}
/>

to implemente the delete functionality
- we call useState as an argument we transform the const expenses value isnide useState
const [expenses, setExpenses] = useState([
    {
      id: 1,
      desciption: "aaa",
      amount: 10,
      category: "Utilities",
    },
    {
      id: 2,
      desciption: "bbb",
      amount: 10,
      category: "Utilities",
    },
    {
      id: 3,
      desciption: "ccc",
      amount: 10,
      category: "Utilities",
    },
    {
      id: 4,
      desciption: "ddd",
      amount: 10,
      category: "Utilities",
    },
  ]);

- (id) => setExpenses(expenses.filter((e) => e.id !== id))
<ExpenseList
  expenses={expenses}
  onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}
/>

last thing if don`t have any value we don`t want to render Total
above null statment
if (expenses.length === 0) return null;

final component state Mahmoud/Building-Forms/src/expense-tracker/components/versions/ExpenseList_v1.tsx


********
STEP2
********
final result file
ExpenseList not changed same as versions/v1/ExpenseList_v1.tsx
change App.tsx last version(versions/v2/App.tsx)
craete ExpenseFilter.tsx last version(versions/v2/ExpenseFilter.tsx)


Building ExpenseFilter

for this mini project we want to only filter by category but we can also fliter by another parameters

- inside components folder
we creating ExpenseFilter.tsx

- we return select.form-select
- we romove the id and name attributes of select

<select className="form-select"></select>

- inside select element we create 4option element
option*4

All Categories
Groceries
Utilities
Entertainment

<select className="form-select">
  <option value="">All Categories</option>
  <option value="Groceries">Groceries</option>
  <option value="Utilities">Utilities</option>
  <option value="Entertainment">Entertainment</option>
</select>

- we want to maintain the act in App.tsx where we defined the data
so we craete interface
interface Props {
  onSelectedCategory: (category: string) => void;
}

- add Props 
const ExpenseFilter = ({ onSelectedCategory }: Props) => 

- using onChange
<select
  className="form-select"
  onChange={(event) => onSelectedCategory(event.target.value)}
>

-test our component until this point
in App.tsx above ExpenseList we add ExpenseFilter

- coz our ExpenseList and ExpenseFilter looks stick to each other we add
.mb-3   (div with margin3)

<div className="mb-3">
  <ExpenseFilter
    onSelectedCategory={(category) => console.log(category)}
  />
</div>
<ExpenseList
  expenses={expenses}
  onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}
/>

- now to do filtering 
in App.tsx we need another variable for representing the selected filter
when that filter changeing the App component will rerendered and the list 
of expense will be updated
so..

- create state variable 
const [selectedCategory, setSelectedCategory] = useState("");

- instead of log the category
onSelectedCategory={(category) => console.log(category)}

- we call setSelectedCategory on that category
onSelectedCategory={(category) => setSelectedCategory(category)}

- to show only the filterd expenses in the  ExpenseList instead of showing the expenses
<ExpenseList
  expenses={expenses}   <== here
  onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}
/>

we create another variable we called visibleExpenses
if selectedCategory truthy (has values) show the expenses where their Categories data = the selected Categories 
const visibleExpenses = selectedCategory
    ? expenses.filter((e) => e.category === selectedCategory)
    : expenses;

- finaly we passed that to our ExpenseList component
<ExpenseList
        expenses={visibleExpenses}
        onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}
      />
