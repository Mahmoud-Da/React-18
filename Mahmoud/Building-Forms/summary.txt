
*** 2-_Building_a_Form ***
ex Form1 component

reinstall 
bootstrap


create Form component
with form elemnet
shortcut
div.mb-3>label.form-label+input.form-contorl + press tap
'>' => inside
'+' => when add multi elements

mb3(bootstrap class to add margin below and above the element)

htmlfor attribute => we set the id in the input 
so if the user hover on the input the lapel get focus

ex: name id
<label htmlFor="name" className="form-label"></label>
<input id="name" type="text" className="form-contorl" />

our implementation is not looking good so we add padding to our form
we create index.css (for global styling)
and impont it inside main.tsx

div.mb-3>label.form-label+input[type=number].form-control
type=number to let it only accept number


*** 3-_Handling_Form_Submission ***
ex Form2 component

to handle form when submitting
we use onSubmit event
ex1 
<form onSubmit={() => console.log("Submitied")}></form>

when we submit we got 

issue says:
A form field has an id or name attribute that the browser's autofill recognizes. However, it doesn't have an autocomplete attribute assigned. This might prevent the browser from correctly autofilling the form.
To fix this issue, provide an autocomplete attribute.

the reason why
by defualt when we submit an html form 
that form post to the server so we got a full page reload
ex2:
to solve the problem we need to prevent
first
console.log("Submitied")
then
we add event and use preventDefault() method to prevent post to the srever
(event) => {
  event.preventDefault()
}

finaly we add console.log
(event) => {
      event.preventDefault();
      console.log("Submitied")
}

but in real world application we call the server to save the data
(we will study a bout it in the next section)

best practice is to seprate into 
ex3:
const handleSbmit = (event) => {
    event.preventDefault();
    console.log("Submitied");
  };

but here we got typeScript error
Parameter 'event' implicitly has an 'any' type

to solve that we have on event to check it`s type before revove it 
 <form
        onSubmit={(event) => {
          event.preventDefault();
          console.log("Submitied");
        }}
      >

we found that the vent type is React.FormEvent

const handleSbmit = (event: React.FormEvent) => {
    event.preventDefault();
    console.log("Submitied");
  };

const handleSbmit = (event: React.FormEvent) => {
event.preventDefault();
console.log("Submitied");
};

PS:here we are reference a method not calling it
onSubmit={handleSubmit}

what is the difference between function call and reference
Function Calling:
onClick={this.clickedbutton()}
Function Referencing:
onClick={this.clickedbutton}

crucial in the context of JavaScript and React.

Function Calling:

It's like telling the computer, "Hey, do this task right now!"
In onClick={this.clickedbutton()}, you're asking the computer to run the clickedbutton function immediately, even before the button is clicked.
Example:

ex:
onClick={this.clickedbutton()}

Function Referencing:
It's like saying, "Hey, when the button is clicked, go and do this task."
In onClick={this.clickedbutton}, you're telling the computer to remember the clickedbutton task and do it later, only when the button is clicked.
Example:

ex:
onClick={this.clickedbutton} // Remember the task, do it when the button is clicked

So, when working with React and event handlers (like onClick), you usually want the second approach. You want to reference the function without the () to make sure the task (function) is performed only when the specific event (like a button click) happens.


*** 4- Accessing Input Fields ***
ex: Form3

before we learned how to use state hook 'useState()'
we have in React another building hook called useRef()
we can use it to refrence a doom element

ex1:
first we define nameRef varible to refer name

and we set the useRef to null

then we call that const nameRef with input field using ref attribute
then in handleSubmit we add 
console.log(nameRef.current) => current return the dom elemnt that we refrence

we can show the value 
console.log(nameRef.current.value)
we got error 'nameRef.current' is possibly 'null'

if (nameRef.current !== null) {
      console.log(nameRef.current.value);
    }

we got another error 
Property 'value' does not exist on type 'never'.
coz
TS does`t know that we are refrencing input html element coz 
using Ref hook we can using any kind of element in the DOM (button, list, etc...)

so to tell the Type Script compiler that we refrencing an input html element 
 const nameRef = useRef<HTMLInputElement>(null);

now we repaets the same steps with age

ex3:
in realworld application when submitting aform we need to send the values (in object shape) 
to the server to save that data
so we define person object
const person = { name: "", age: 0 };

handleSubmit instead of loging the value we use 
const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    if (nameRef.current !== null) {
      person.name = nameRef.current.value;
    }
    if (ageRef.current !== null) {
      person.age = ageRef.current.value;
    }
  };
we got compilation error coz  age is defind as number but ageRef.current.value return string
so we need to call parseInt() to convert the ageRef.current.value to number

now we have the data
{name: 'AboKarKar', age: 25}

finaly
why we inislaize every newRef to null?
Ref.current refrence a DOM node so the inisital value that we passed
as newRefer parameter will set the Ref.current property

inisitally we create an newRefer object we don`t have access to the DOM node
coz DOM is created afer the react renders our component

so we don`t have a value to inisital to newRef
in other hand we inisital newRef with null 
newRef will have value if there is refrence and reset to null when the node removed from the screen

so newRef must be newRef(null) or newRef(some inisital value) otherwise we will have undefined
that why we should always refrence our newRef to null

*** 5-_Controlled_Components ***
ex: Form4

another way to have the input value of a form
we can use the useState Hook

1- (ex1)
const [person, setPerson] = useState({
    name: "",
    age: 0,
  });

we craete person object
we add onChange in input element
<input id="name" type="text" className="form-control" />

onChange works like 
onChange={(event) => event.value.target}
so here we call 

onChange={(event) =>
              setPerson({ ...person, name: event.target.value })
            }

repeat the same with age 
onChange={(event) =>
              setPerson({ ...person, age: event.target.value })
            }
we had a compilation error coz the return value is string and age is integer
to fix that we use parseInt() 

2- log the person inside handleSubmit

PS:
when using useState Hook so everyTime we update our value inside the form
(the state updated) that`s why our react component will reRenderd

for some cases it`s ok (some people said it`s better to use useRef always)
but remember it`s depend on the situation 

for Example: if the component is not big it`s ok to use state hook

3-
all input fields in the HTML having value propertyto maintain thier own state
but in our implementation we have state called person
so it`s possibe that our sources get out of sync 

to solve the problem we should make React only return one value of state of input html

so we set the value attribute of our input to the person state value
value={person.name}

so now input field always relays in person state value


now we do the same thing with age 
value={person.age}

now if we refresh the page we will see the input value inisital to person age
which is 0 

if we want to remove it we can set age to empty string
const [person, setPerson] = useState({
    name: "",
    age: "",
  });


*** 6-_Managing_Forms_with_React_Hook_Form ***
ex: Form5


as our form get complex manging the hook state  can be time consuming
coz for every input field we need to set the onChange attribute we need to set the value

here we can use react-hook-form (@7.43 same as course)

then we import custome hook called useForm 
import { useForm } from "react-hook-form";


ex1
we console Form hook to see what method we have

const form = useForm();
console.log(form);

ex2
see what happne when we use register
const { register } = useForm();
console.log(register("name"));

in console we see this 
{name: 'name', onChange: ƒ, onBlur: ƒ, ref: ƒ}
name: "name"
onBlur: async (event) => {…}
onChange: async (event) => {…}
ref: (ref) => {…}
[[Prototype]]: Object


in name field:
we remove 
onChange={(event) =>
              setPerson({ ...person, name: event.target.value })
            }
            value={person.name}

and add instead 
{...register("name")}

... to copy =>

onBlur: async (event) => {…}
onChange: async (event) => {…}
ref: (ref) => {…}
[[Prototype]]: Object


same as age

no we don`t need  persom object and handleSubmit
so we remove it

ex3:
we have handleSubmit in the form hook 
const { register, handleSubmit } = useForm();

to use it 
<form onSubmit={handleSubmit((date) => console.log(date))}>

best practice to move handleSubmit((date) => console.log(date)) to seprate function
onSubmit = (date) => console.log(date); now we have compilation error data type

to solve that we hover  to <form onSubmit={handleSubmit((date) => console.log(date))}> 
finaly
const onSubmit = (date: FieldValues) => console.log(date);

*** 7-_Applying_Validation ***
ex: Form6

we want to add valifation (rule) that at least more that 3 char

ex:1
{...(register("name"), { required: true, minLength: 3 })}

if we submit with empty values we will get error
to show the error message to the user

const { register, handleSubmit, formState } = useForm();

we use form state object

// to see the formState object
console.log(formState);

// to see the error {in console we can see minlength error or required error}
console.log(formState.errors);

now to show the user the message
ex:1_1

formState.errors.name?.type

?. is opitional chainig that`s we need it coz formState.errors can be empty
nil.errors we will run error 

ex: 1_2
coz we will use formState.errors serveral times best practice  to use const {
          register,
          handleSubmit,
        formState: { errors },
        } = useForm();*

now same thing with minLength

finally to make the errro looks good we apply "text-danger"

when we type errors. we can`t see the propertites of name and age only we can see the root
to make our development enviroment better we create interface
ex-4 



*** 8-_Schema-based_Validation_with_Zod ***
ex: Form7

in our markup we have validation rules in the middle of it
as our component get bigger and more complex our markup will be hard to read and maintain

so is better to use Tichnique called Schema-based Validation

which it allows as to set all the validation roles in one place we called Schema

Validation lip
Joi
Yup
Zod

in this class i will use Zod (used lately) only the basic

1-
install zod 
npm i zod@3.20.6

import { z } from "zod";

2-
define z object
we use schema as name

3- 
remove interface FormData
use instead
type FormData = z.infer<typeof schema>;

if hover at FormData
we can see it like interface

4- we install 
npm i @hookform/resolvers@2.9.11
import { zodResolver } from "@hookform/resolvers/zod";

5- 
const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>();

we pass resolver
useForm<FormData>({ resolver: zodResolver(schema) });

delete 
, { required: true, minLength: 3 }

and remain only one p

change the condition 
errors.name only 

change the message to dynamically   (zod will take care of the error message based on the  schema we defind)

same thing with age input

6-
now if we want to change the message

when age we have this erros which hard for the user to undertand
name: z.string().min(3, { message: "Name nust be at least 3 chars" }),

Expected number, received string


to learn more:
https://zod.dev/


*** 9-_Disabling_the_Submit_Button ***
ex: Form8
1- we add isValid to formState
const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<FormData>({ resolver: zodResolver(schema) });

2- in the button element we add disabled when is not valid
<button disabled={!isValid} className="btn btn-primary" type="submit">
