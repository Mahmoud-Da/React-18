steps in this project:


adding bootstrap

1-install boot strap
npm i bootstrap

in this course the version is 
npm i bootstrap@5.2.3

2- removing the styles in App.css (app component), index.css(root styles {the entire file}) 

3- in main.tsx we replace import './index.css' with import "bootstrap/dist/css/bootstrap.css";

4- class is name in JS refers to the class so we need to chnage class -> ClassName
ex: 
<ul class="list-group">   =>   <ul className="list-group">



Memo: we only can return on element in React
cuz: 
<h1>List</h1>; translate in react => React.createElement("h1")
and can`t return multi statement

to fix this issue:
1- wrap all the elemnets with div
 (but not recomannded coz we add extra element in the DWM without meaning )

2- import { Fragment } from "react"; and wrap with Fragment
(but not recomannded coz are importing make our code size large if we want use it multi times )


3- best way to use Fragment tags {<> </>}


rendering list
in jsx we can`t use for loop so we use diffrent technic like map method


&& operater (coomen technic for React Developer)
true && 1
=>1

true && "moody"
=> 'moody'

false && "moody"
=> false
ex:
if statement items.length === 0 is true result is <p> No Item found</p>
if statement items.length === 0 is false result is false which means nothing will render


if we defined the input(type of list) in our component
we will have to create new component each time we want to change the input (list of colors, list of names and so ..)
to make our component reausble we used Props or Property (Props are the input to our component)
1- type the shape of our component (ins this case {item: [], heading: string})
using Interface (we use Props as common name)

2- give the functions argument and the type of that argument is the Interface
  ex ListGroup(props: Props)
  or better practice ({attrubutes} : Props) so we don`t have to use prefex

3- move the items(data) to App component

4- call the intaface attrubutes as html attrubutes
<ListGroup6 items={items} heading="Cites"/>


      Props              Vs                  State
- input passed                       - Data managed by component        
 to a component

- similar to function arguments      - Similar to local varibale

- immutable(unchangeble)             - mutable (changeble)        

- cause a re-render                  - cause a re-render


pass child to component
example 
<Alert text="Alert"

better  way
<Alert>Alert</Alert>

or evenn if we want to add html elements inside
Hello <span>World</span>

inside  Interface
we add and the Type is ReactNode
interface Props {
  children: ReactNode;
}
